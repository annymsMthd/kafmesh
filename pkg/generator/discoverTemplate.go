package generator

import (
	"io"
	"text/template"

	"github.com/syncromatics/kafmesh/pkg/models"

	"github.com/pkg/errors"
)

var (
	discoverTemplate = template.Must(template.New("").Parse(`// Code generated by kafmesh-gen. DO NOT EDIT.

package discover

import (
	"github.com/syncromatics/kafmesh/pkg/models"
	"github.com/syncromatics/kafmesh/pkg/runner"
)

func Initialize_Discover_Info_{{ .Component.Name }}(service *runner.Service) {

	var serviceDetails = models.Service{
		Name:        "{{ .ServiceName }}",
		Description: "{{ .ServiceDescription }}",
	}

	var component = models.Component{
				Name:        "{{ .Component.Name }}",
				Description: "{{ .Component.Description }}",
				Sources:     []models.Source{},
				Processors:  []models.Processor{},
				Sinks:       []models.Sink{},
				Views:       []models.View{},
				ViewSources: []models.ViewSource{},
				ViewSinks:   []models.ViewSink{},
				Persistence: nil,
	}

	service.DiscoverInfo.ServiceName = serviceDetails.Name
	service.DiscoverInfo.ServiceDescription = serviceDetails.Description
	service.DiscoverInfo.Component = component
}

`))
)

type discoverOptions struct {
	ServiceName        string
	ServiceDescription string
	Component          models.Component
}

func generateDiscover(writer io.Writer, serviceName string, serviceDescription string, component models.Component) error {
	c := discoverOptions{
		ServiceName:        serviceName,
		ServiceDescription: serviceDescription,
		Component:          component,
	}

	err := discoverTemplate.Execute(writer, c)
	if err != nil {
		return errors.Wrap(err, "failed to execute service template")
	}

	return nil
}
